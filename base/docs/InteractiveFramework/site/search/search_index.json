{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Interactive Framework Summary The Interactive Framework was created to modulate existing scripts into a single toolset. The Framework will dynamically import modules from the module directory, provide recommendations on commands, and allow you to run a module interactively or run with the necessary arguments from the main menu. Alternatively, a flag is added to the aem_util.py script so you can run your module and arguments in a single command. This is useful when designing jenkins jobs or other scheduled automation tasks. Project layout aem_util.py (Script Calls the actual framework with an easy to use name) base/ main.py (Main script for Interactive Framework) core/ (Directory for Core Framework Modules) get_arguments.py (Module That Defines arguments for main.py) pyCommon.py (Module That Defines common imports and variables for import) modules/ (Directory to store Modules) encode_password.py (Module to encode / decode passwords) sql_query.py (Module to perform SQLite3 queries and return results) <Your Custom Module Here> How to Run To Run, simply run python and the aem_util.py like so: python /path/to/aem_util.py To execute in a single command and avoid running the main menu, Simply use the -m argument. This example runs the sql_query.py module with multiple arguments Example: python3 aem_util.py -m \"encode_password --encode test\" Main Menu + recommendations: Dynamically Import Modules without changing code: Run Module Interactive: Module Help / Acceptable Arguments: Execute Module With Acceptable Arguments: Exit Module:","title":"Getting Started"},{"location":"#welcome-to-the-interactive-framework","text":"","title":"Welcome to the Interactive Framework"},{"location":"#summary","text":"The Interactive Framework was created to modulate existing scripts into a single toolset. The Framework will dynamically import modules from the module directory, provide recommendations on commands, and allow you to run a module interactively or run with the necessary arguments from the main menu. Alternatively, a flag is added to the aem_util.py script so you can run your module and arguments in a single command. This is useful when designing jenkins jobs or other scheduled automation tasks.","title":"Summary"},{"location":"#project-layout","text":"aem_util.py (Script Calls the actual framework with an easy to use name) base/ main.py (Main script for Interactive Framework) core/ (Directory for Core Framework Modules) get_arguments.py (Module That Defines arguments for main.py) pyCommon.py (Module That Defines common imports and variables for import) modules/ (Directory to store Modules) encode_password.py (Module to encode / decode passwords) sql_query.py (Module to perform SQLite3 queries and return results) <Your Custom Module Here>","title":"Project layout"},{"location":"#how-to-run","text":"To Run, simply run python and the aem_util.py like so: python /path/to/aem_util.py To execute in a single command and avoid running the main menu, Simply use the -m argument. This example runs the sql_query.py module with multiple arguments Example: python3 aem_util.py -m \"encode_password --encode test\"","title":"How to Run"},{"location":"#main-menu-recommendations","text":"","title":"Main Menu + recommendations:"},{"location":"#dynamically-import-modules-without-changing-code","text":"","title":"Dynamically Import Modules without changing code:"},{"location":"#run-module-interactive","text":"","title":"Run Module Interactive:"},{"location":"#module-help-acceptable-arguments","text":"","title":"Module Help / Acceptable Arguments:"},{"location":"#execute-module-with-acceptable-arguments","text":"","title":"Execute Module With Acceptable Arguments:"},{"location":"#exit-module","text":"","title":"Exit Module:"},{"location":"example/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"example/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"example/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"example/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"modules/encode_password/","text":"Encode Password Summary: Module that Encodes and Decodes Password using a secret key and SHA-256 Encoding. script name: encode_password.py What Does the Module do?: Encode Password and return result so it can't be viewed in plain text Perfect for storing in databases for extra security Decode Password and return plain text result Perfect for decoding passwords stored securely in databases Prerequisites: None Arguments: Argument CommandLine Flag Description Encode --encode, -encode Encodes a string Decode --decode, -decode Decodes Encoded String","title":"Encode Password"},{"location":"modules/encode_password/#encode-password","text":"","title":"Encode Password"},{"location":"modules/encode_password/#summary","text":"Module that Encodes and Decodes Password using a secret key and SHA-256 Encoding. script name: encode_password.py What Does the Module do?: Encode Password and return result so it can't be viewed in plain text Perfect for storing in databases for extra security Decode Password and return plain text result Perfect for decoding passwords stored securely in databases","title":"Summary:"},{"location":"modules/encode_password/#prerequisites","text":"None","title":"Prerequisites:"},{"location":"modules/encode_password/#arguments","text":"Argument CommandLine Flag Description Encode --encode, -encode Encodes a string Decode --decode, -decode Decodes Encoded String","title":"Arguments:"},{"location":"modules/modules/","text":"Modules - Interactive Framework Onboaring New Modules Requirements This section is to serve as a guide for the core modules developed for the Interactive Framework Requirements for onboarding new core modules: Creation of new <module>.md file Summary of new module Explanation of module arguments Prerequisites such as DB Files, Columns, etc. Add Summary of new module in modules.md Link to new module documentation in modules.md Modules: Encode Password Module that Encodes and Decodes Password using a secret key and SHA-256 Encoding. Documentation: encode_password.py SQL Query Module that queries an existing sqlite database Documentation: sql_query.py","title":"Core Modules"},{"location":"modules/modules/#modules-interactive-framework","text":"","title":"Modules - Interactive Framework"},{"location":"modules/modules/#onboaring-new-modules-requirements","text":"This section is to serve as a guide for the core modules developed for the Interactive Framework Requirements for onboarding new core modules: Creation of new <module>.md file Summary of new module Explanation of module arguments Prerequisites such as DB Files, Columns, etc. Add Summary of new module in modules.md Link to new module documentation in modules.md","title":"Onboaring New Modules Requirements"},{"location":"modules/modules/#modules","text":"","title":"Modules:"},{"location":"modules/modules/#encode-password","text":"Module that Encodes and Decodes Password using a secret key and SHA-256 Encoding. Documentation: encode_password.py","title":"Encode Password"},{"location":"modules/modules/#sql-query","text":"Module that queries an existing sqlite database Documentation: sql_query.py","title":"SQL Query"},{"location":"modules/sql_query/","text":"SQL Query Summary: Module that queries an existing sqlite database script name: sql_query.py What Does the Module do?: Queries User Identified Database using the User Identified query Also can return list of available tables within the database Prerequisites: Download Tool: SQLite DB Browser Must have sql_query.py module installed Create an SQLite database (.db file) Example: Create a table named Environments_<Project> : Table Columns: Environment , URL , Type , IP , Hostname , Service Account , Password Column Type Environment TEXT URL TEXT TYPE TEXT IP TEXT HostName TEXT Service Account TEXT Password TEXT Ensure that the Password values in your table are encoded using the encode_password Module Populate Table data using SQLite DB Browser Arguments: Argument CommandLine Flag Description Database --database, --db, -database, -db Defines what database to perform queries on Query --query, --q, -query, -q Defines what sqlite query will be done to provide a list of server information. This controls the # of Environments and servers to report on.","title":"SQL Query"},{"location":"modules/sql_query/#sql-query","text":"","title":"SQL Query"},{"location":"modules/sql_query/#summary","text":"Module that queries an existing sqlite database script name: sql_query.py What Does the Module do?: Queries User Identified Database using the User Identified query Also can return list of available tables within the database","title":"Summary:"},{"location":"modules/sql_query/#prerequisites","text":"Download Tool: SQLite DB Browser Must have sql_query.py module installed Create an SQLite database (.db file) Example: Create a table named Environments_<Project> : Table Columns: Environment , URL , Type , IP , Hostname , Service Account , Password Column Type Environment TEXT URL TEXT TYPE TEXT IP TEXT HostName TEXT Service Account TEXT Password TEXT Ensure that the Password values in your table are encoded using the encode_password Module Populate Table data using SQLite DB Browser","title":"Prerequisites:"},{"location":"modules/sql_query/#arguments","text":"Argument CommandLine Flag Description Database --database, --db, -database, -db Defines what database to perform queries on Query --query, --q, -query, -q Defines what sqlite query will be done to provide a list of server information. This controls the # of Environments and servers to report on.","title":"Arguments:"},{"location":"modules/aem/aem_access_report/","text":"AEM Access Report Summary: creates multiple AEM user, group, and membership reports. script name: aem_access_report.py Report Output Path: <UserHome>/aem_permission_reports What Does the Module do?: Collects all User Info Report on users without UUID Repot on users missing Profiles Collects all Group Info Report on all users and what groups they belong to Prerequisites: Download Tool: SQLite DB Browser Must have sql_query.py module installed Must have encode_password.py module installed Create an SQLite database (.db file) Create a table named Environments_<Project> Table Columns: Environment , URL , Type , IP , Hostname , Service Account , Password Column Type Environment TEXT URL TEXT TYPE TEXT IP TEXT HostName TEXT Service Account TEXT Password TEXT Ensure that the Password values in your table are encoded using the encode_password Module Populate Table data using SQLite DB Browser Arguments: Argument CommandLine Flag Description Database --database, --db, -database, -db Defines what database to perform queries on Query --query, --q, -query, -q Defines what sqlite query will be done to provide a list of server information. This controls the # of Environments and servers to report on.","title":"AEM Access Report"},{"location":"modules/aem/aem_access_report/#aem-access-report","text":"","title":"AEM Access Report"},{"location":"modules/aem/aem_access_report/#summary","text":"creates multiple AEM user, group, and membership reports. script name: aem_access_report.py Report Output Path: <UserHome>/aem_permission_reports What Does the Module do?: Collects all User Info Report on users without UUID Repot on users missing Profiles Collects all Group Info Report on all users and what groups they belong to","title":"Summary:"},{"location":"modules/aem/aem_access_report/#prerequisites","text":"Download Tool: SQLite DB Browser Must have sql_query.py module installed Must have encode_password.py module installed Create an SQLite database (.db file) Create a table named Environments_<Project> Table Columns: Environment , URL , Type , IP , Hostname , Service Account , Password Column Type Environment TEXT URL TEXT TYPE TEXT IP TEXT HostName TEXT Service Account TEXT Password TEXT Ensure that the Password values in your table are encoded using the encode_password Module Populate Table data using SQLite DB Browser","title":"Prerequisites:"},{"location":"modules/aem/aem_access_report/#arguments","text":"Argument CommandLine Flag Description Database --database, --db, -database, -db Defines what database to perform queries on Query --query, --q, -query, -q Defines what sqlite query will be done to provide a list of server information. This controls the # of Environments and servers to report on.","title":"Arguments:"},{"location":"modules/aem/aem_create_groups/","text":"AEM Create Groups Summary: Module that creates AEM System Groups, AEM Tenant Groups, and AEM Application Groups. Then assigns the necessary group memberships. script name: aem_create_groups.py Log Output Path: <UserHome>/aem_create_groups/logs What Does the Module do?: Creates Predefined System Groups Creates Predefined Tenant Groups Creates Predefined App groups Logs all Output to <UserHome>/aem_create_groups/logs Prerequisites: Download Tool: SQLite DB Browser Must have sql_query.py module installed Must have encode_password.py module installed Create an SQLite database (.db file) Create a table named Environments_<Project> Table Columns: Environment , URL , Type , IP , Hostname , Service Account , Password Column Type Environment TEXT URL TEXT TYPE TEXT IP TEXT HostName TEXT Service Account TEXT Password TEXT Ensure that the Password values in your table are encoded using the encode_password Module Populate Table data using SQLite DB Browser Create a table named Groups_<Project> Table Columns: Type , Node_Type , Name , Member_Of Column Type Specific Supported Values TYPE TEXT system, tenant, app Node_Type TEXT group, user Name TEXT Member_Of TEXT Populate Groups Data data using SQLite DB Browser Create a table named Service_Accounts_<Project> Table Columns: Environment , Password Column Type Environment TEXT Password TEXT Ensure that the Password values in your table are encoded using the encode_password Module Populate Service Account Data data using SQLite DB Browser Arguments: Argument CommandLine Flag Description Database --database, --db, -database, -db Defines what database to perform queries on Query --query, --q, -query, -q Defines what sqlite query will be done to provide a list of server information. This controls the # of Environments and servers to report on.","title":"AEM Create Groups"},{"location":"modules/aem/aem_create_groups/#aem-create-groups","text":"","title":"AEM Create Groups"},{"location":"modules/aem/aem_create_groups/#summary","text":"Module that creates AEM System Groups, AEM Tenant Groups, and AEM Application Groups. Then assigns the necessary group memberships. script name: aem_create_groups.py Log Output Path: <UserHome>/aem_create_groups/logs What Does the Module do?: Creates Predefined System Groups Creates Predefined Tenant Groups Creates Predefined App groups Logs all Output to <UserHome>/aem_create_groups/logs","title":"Summary:"},{"location":"modules/aem/aem_create_groups/#prerequisites","text":"Download Tool: SQLite DB Browser Must have sql_query.py module installed Must have encode_password.py module installed Create an SQLite database (.db file) Create a table named Environments_<Project> Table Columns: Environment , URL , Type , IP , Hostname , Service Account , Password Column Type Environment TEXT URL TEXT TYPE TEXT IP TEXT HostName TEXT Service Account TEXT Password TEXT Ensure that the Password values in your table are encoded using the encode_password Module Populate Table data using SQLite DB Browser Create a table named Groups_<Project> Table Columns: Type , Node_Type , Name , Member_Of Column Type Specific Supported Values TYPE TEXT system, tenant, app Node_Type TEXT group, user Name TEXT Member_Of TEXT Populate Groups Data data using SQLite DB Browser Create a table named Service_Accounts_<Project> Table Columns: Environment , Password Column Type Environment TEXT Password TEXT Ensure that the Password values in your table are encoded using the encode_password Module Populate Service Account Data data using SQLite DB Browser","title":"Prerequisites:"},{"location":"modules/aem/aem_create_groups/#arguments","text":"Argument CommandLine Flag Description Database --database, --db, -database, -db Defines what database to perform queries on Query --query, --q, -query, -q Defines what sqlite query will be done to provide a list of server information. This controls the # of Environments and servers to report on.","title":"Arguments:"},{"location":"modules/aem/aem_modules/","text":"Modules - Adobe Experience Manager (AEM) Onboaring New Modules Requirements This section is to serve as a guide for the AEM modules developed for the Interactive Framework Requirements for onboarding new AEM modules: Creation of new <module>.md file Summary of new module Explanation of module arguments Prerequisites such as DB Files, Columns, etc. Add Summary of new module in aem_modules.md Link to new module documentation in aem_modules.md Modules: AEM Access Report Module that creates multiple AEM user, group, and membership reports that are useful when providing system / application audits. Documentation: aem_access_report.py AEM Create Groups Module that creates AEM System Groups, AEM Tenant Groups, and AEM Application Groups. Then assigns the necessary group memberships. Documentation: aem_create_groups.py","title":"AEM Modules"},{"location":"modules/aem/aem_modules/#modules-adobe-experience-manager-aem","text":"","title":"Modules - Adobe Experience Manager (AEM)"},{"location":"modules/aem/aem_modules/#onboaring-new-modules-requirements","text":"This section is to serve as a guide for the AEM modules developed for the Interactive Framework Requirements for onboarding new AEM modules: Creation of new <module>.md file Summary of new module Explanation of module arguments Prerequisites such as DB Files, Columns, etc. Add Summary of new module in aem_modules.md Link to new module documentation in aem_modules.md","title":"Onboaring New Modules Requirements"},{"location":"modules/aem/aem_modules/#modules","text":"","title":"Modules:"},{"location":"modules/aem/aem_modules/#aem-access-report","text":"Module that creates multiple AEM user, group, and membership reports that are useful when providing system / application audits. Documentation: aem_access_report.py","title":"AEM Access Report"},{"location":"modules/aem/aem_modules/#aem-create-groups","text":"Module that creates AEM System Groups, AEM Tenant Groups, and AEM Application Groups. Then assigns the necessary group memberships. Documentation: aem_create_groups.py","title":"AEM Create Groups"}]}